#!/usr/bin/perl
##############################################################################
##
##  immuse -- image file conversion utility
##  2018 (c) Vladi Belperchinov-Shabanski "Cade"
##  <cade@bis.bg> <cade@biscom.net> <cade@cpan.org>
##
##  LICENSE: GPLv2
##
##############################################################################
use strict;
use Imager;
use Data::Tools;

# TODO: gamma (-m)? for all channels or by channel
# TODO: crop (-c geo)?

INIT { $| = 1; }

our $help_text = <<END;
usage: $0 <options> [input-files]

options:
    -o output-file-name  -- sets output file, works only for single input file
    -f output-format     -- sets output file format (i.e. JPEG, GIF, etc.) 
    -i input-format      -- sets input  file format (i.e. JPEG, GIF, etc.) 
    -x width             -- sets output image width in pixels (keeps aspect!)
    -y height            -- sets output image width in pixels (keeps aspect!)
    -x width%            -- sets output image width in percents (keeps aspect!)
    -y height%           -- sets output image width in percents (keeps aspect!)
    -h                   -- flip image horizontally 
    -v                   -- flip image vertically   
    -g                   -- convert image to grayscale
    -q quality           -- output quality in percents (if applicable)
    -a                   -- always overwrite files (WARNING!)
    -n                   -- never  overwrite files (skip, existing)
    --        -- end of options

notes:
    * "-i list" or "-f list" will list supported file formats
    * if both -x and -y specified, aspect will not be kept!
    * use "-x nnnn -y 100%" to stretch horizontally
    * use "-x 100% -y nnnn" to stretch vertically
    * options cannot be grouped: -fd is invalid, correct is: -f -d

END


my $opt_out_file_name;
my $opt_out_file_format;
my $opt_in_file_format;
my $opt_out_x;
my $opt_out_y;
my $opt_out_x_percents;
my $opt_out_y_percents;
my $opt_out_quality = 72;
my $opt_always_overwrite;
my $opt_never_overwrite;
my $opt_flip_h;
my $opt_flip_v;
my $opt_grayscale;

my %IFMT = map { $_ => $_ } Imager->read_types();
my %OFMT = map { $_ => $_ } Imager->write_types();

# known format shortcuts
$IFMT{ 'jpg' } = 'jpeg' if exists $IFMT{ 'jpeg' };
$OFMT{ 'jpg' } = 'jpeg' if exists $OFMT{ 'jpeg' };

if( @ARGV == 0 )
  {
  print $help_text;
  exit;
  }

our @args;
while( @ARGV )
  {
  $_ = shift;
  if( /^--+$/io )
    {
    push @args, @ARGV;
    last;
    }
  if( /^-g$/ )
    {
    $opt_grayscale = 1;
    next;
    }
  if( /^-h$/ )
    {
    $opt_flip_h = 1;
    next;
    }
  if( /^-v$/ )
    {
    $opt_flip_v = 1;
    next;
    }
  if( /^-a$/ )
    {
    $opt_always_overwrite = 1;
    next;
    }
  if( /^-n$/ )
    {
    $opt_never_overwrite = 1;
    next;
    }
  if( /^-o$/ )
    {
    $opt_out_file_name = shift;
    next;
    }
  if( /^-f([a-z]*)$/i )
    {
    $opt_out_file_format = lc $1 || lc shift;
    die "error: unsupported output file format [$opt_out_file_format] use '-f list'\n" unless exists $OFMT{ $opt_out_file_format };
    next;
    }
  if( /^-i([a-z]*)$/ )
    {
    $opt_in_file_format = lc $1 || lc shift;
    die "error: unsupported input file format [$opt_in_file_format] use '-i list'\n" unless exists $IFMT{ $opt_in_file_format };
    next;
    }
  if( /^-x(\d*%?)$/ )
    {
    $opt_out_x = $1 || shift;
    if( $opt_out_x =~ s/%$// )
      {
      $opt_out_x_percents = $opt_out_x;
      $opt_out_x = undef;
      $opt_out_x_percents = 100 if $opt_out_x_percents <= 0 or $opt_out_x_percents > 100;
      }
    else
      {
      die "error: -x must be non-zero positive number\n" if $opt_out_x <= 0;
      }  
    next;
    }
  if( /^-y(\d*%?)$/ )
    {
    $opt_out_y = shift;
    if( $opt_out_y =~ s/%$// )
      {
      $opt_out_y_percents = $opt_out_y;
      $opt_out_y = undef;
      $opt_out_y_percents = 100 if $opt_out_y_percents <= 0 or $opt_out_y_percents > 100;
      }
    else
      {
      die "error: -y must be non-zero positive number\n" if $opt_out_y <= 0;
      }  
    next;
    }
  if( /^-q(\d*)$/ )
    {
    $opt_out_quality = int($1 || shift);
    $opt_out_quality = 72 if $opt_out_quality < 1 or $opt_out_quality > 100;
    next;
    }
  if( /^(--?h(elp)?|help)$/io )
    {
    print $help_text;
    exit;
    }
  push @args, $_;
  }


print @args;

if( $opt_in_file_format =~ /help|list/ or $opt_out_file_format =~ /help|list/ )
  {
  print "supported input  formats: " . join( ',', sort keys %OFMT ) . "\n";
  print "supported output formats: " . join( ',', sort keys %OFMT ) . "\n";
  }

die "error: -o can be used to convert only single file\n" if @args > 1 and $opt_out_file_name;
die "status: nothing to do: no file names specified\n" unless @args > 0;


for my $infile ( @args )
{
  process_file( $infile );
}

exit 0;

##############################################################################

sub process_file
{
  my $infile = shift;
  
  my $outfile = $opt_out_file_name ? $opt_out_file_name : ( file_path( $infile ) ? file_path( $infile ) . '/' : undef  ) . file_name( $infile ) . '.' . $opt_out_file_format;
  
  my $in_file_format = $opt_in_file_format ? $opt_in_file_format : lc file_ext( $infile );

  die "error: unsupported input file format [$in_file_format] use '-i list'\n" unless exists $IFMT{ $in_file_format };

  $in_file_format = $IFMT{ $in_file_format };
  $opt_out_file_format = $OFMT{ $opt_out_file_format };
  
  print "$infile --> $outfile";
  
  if( -e $outfile )
    {
    if( $opt_never_overwrite )
      {
      print " -- SKIPPED\n";
      return;
      }
    if( ! $opt_always_overwrite )
      {
      my $ans_ok;
      while( ! $ans_ok )
        {
        print "\n[$outfile] exists, overwrite? (Yes|Always|No|Never)?";
        my $ans = lc <STDIN>;
        if( $ans =~ /^\s*y(es)?\s*$/ )
          {
          $ans_ok = 1;
          }
        elsif( $ans =~ /^\s*n(o)?\s*$/ )  
          {
          return;
          }
        elsif( $ans =~ /^\s*a(lways)?\s*$/ )  
          {
          $ans_ok = 1;
          $opt_always_overwrite = 1;
          }
        elsif( $ans =~ /^\s*n(ever)?\s*$/ )  
          {
          $opt_never_overwrite = 1;
          return;
          }
        }  
      }  
    }

  print "\n";
  
  my $img = Imager->new();
  $img->read( file => $infile, type => $in_file_format )
    or die "cannot read [$infile]: " . $img->errstr() . "\n";

  # scale
  my $in_w = $img->getwidth();
  my $in_h = $img->getheight();
  
  my $out_w;
  my $out_h;
  
  $opt_out_x = int( $in_w * $opt_out_x_percents / 100 ) if $opt_out_x_percents > 0;
  $opt_out_y = int( $in_h * $opt_out_y_percents / 100 ) if $opt_out_y_percents > 0;

  if( $opt_out_x > 0 and $opt_out_y > 0 )  
    {
    $out_w = $opt_out_x;
    $out_h = $opt_out_y;
    }
  elsif( $opt_out_x <= 0 and $opt_out_y > 0 )  
    {
    $out_w = int( $in_w * $opt_out_y / $in_h );
    $out_h = $opt_out_y;
    }
  elsif( $opt_out_x > 0 and $opt_out_y <= 0 )  
    {
    $out_w = $opt_out_x;
    $out_h = int( $in_h * $opt_out_x / $in_w );
    }

#print "$opt_out_x_percents $opt_out_y_percents $opt_out_x $opt_out_y -- $out_w $out_h\n";

    
  if( $out_w > 0 and $out_h > 0 )  
    {
    print "scaling to $out_w x $out_h\n";
    $img = $img->scale( xpixels => $out_w, ypixels => $out_h, type => 'nonprop' ) ;
    }

  $img->flip( dir => "h" ) if $opt_flip_h;
  $img->flip( dir => "v" ) if $opt_flip_v;
  
  $img = $img->convert( preset => 'grey'  );

  $img->write( file => $outfile, type => $opt_out_file_format )
    or die "cannot read [$outfile]: " . $img->errstr() . "\n";
  
}

### EOF ######################################################################

